import {addToCart, cart, loadFromStorage} from "../../data/cart.js";
describe('test suite: addToCart', () => {
// Part II: Reuse code from part I
it('adds an existing product to the cart', () => {
  spyOn(localStorage, 'setItem');

  spyOn(localStorage, 'getItem').and.callFake(() => {
    return JSON.stringify([{
      productId: 'e43638ce-6aa0-4b85-b27f-e1d07eb678c6',
      quantity: 1,
      deliveryOptionId: '1'
    }]);
  });
  loadFromStorage();

  addToCart('e43638ce-6aa0-4b85-b27f-e1d07eb678c6');
  expect(cart.length).toEqual(1);
  //check if setItems was called:
  expect(localStorage.setItem).toHaveBeenCalledTimes(1);
  expect(cart[0].productId).toEqual('e43638ce-6aa0-4b85-b27f-e1d07eb678c6');
  expect(cart[0].quantity).toEqual(2);

});


// Part 1:
it('adds a new product to the cart',() => {
  // To prevent test code from adding items to locaStorage,
  // mock localStorage.setItem:
  spyOn(localStorage, 'setItem');
  // Pass to spyOn() the object and method to mock. i.e, 
  // spyOn(localStorage, 'getItem')
  // HIWs: This will replace the localStorage with a fake version
  //       that can help us do whatever we want.
  spyOn(localStorage, 'getItem').and.callFake(() => {
    return JSON.stringify([]);
  });
  //console.log(localStorage.getItem('cart'))
  loadFromStorage();

  addToCart('e43638ce-6aa0-4b85-b27f-e1d07eb678c6');
  expect(cart.length).toEqual(1);
  //check if setItems was called:
  expect(localStorage.setItem).toHaveBeenCalledTimes(1);
  expect(cart[0].productId).toEqual('e43638ce-6aa0-4b85-b27f-e1d07eb678c6');
  expect(cart[0].quantity).toEqual(1);

  });

});
